/* Generated By:JavaCC: Do not edit this line. CommandInterpreter.java */
        package de.fhg.iese.cl.parser;
        public class CommandInterpreter implements CommandInterpreterConstants {

  final public CommandLine specification() throws ParseException {
 CommandLine c=new CommandLine();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXIT:
      c = exit();
  {if (true) return c;}
      break;
    case CLEAR:
      c = clear();
  {if (true) return c;}
      break;
    case HELP:
      c = help();
  {if (true) return c;}
      break;
    case SETPROPERTIES:
      c = setProperties();
  {if (true) return c;}
      break;
    case SHOWPROPERTIES:
      c = showProperties();
  {if (true) return c;}
      break;
    case ADDCOREASSET:
      c = addCoreAsset();
  {if (true) return c;}
      break;
    case SHOWCOREASSETS:
      c = showCoreAssets();
  {if (true) return c;}
      break;
    case SHOWINSTANCES:
      c = showInstances();
  {if (true) return c;}
      break;
    case SHOWINSTANCEDIFF:
      c = showInstanceDiff();
  {if (true) return c;}
      break;
    case SHOWCOREDIFF:
      c = showCoreDiff();
  {if (true) return c;}
      break;
    case INSTANTIATECOREASSET:
      c = instantiateCoreAsset();
  {if (true) return c;}
      break;
    case REBASE:
      c = rebase();
  {if (true) return c;}
      break;
    case INTEGRATE:
      c = integrate();
  {if (true) return c;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CommandLine exit() throws ParseException {
  CommandLine c=new CommandLine();
    c.command = jj_consume_token(EXIT);
  {if (true) return c;}
    jj_consume_token(0);
    throw new Error("Missing return statement in function");
  }

  final public CommandLine clear() throws ParseException {
  CommandLine c=new CommandLine();
    c.command = jj_consume_token(CLEAR);
  {if (true) return c;}
    jj_consume_token(0);
    throw new Error("Missing return statement in function");
  }

  final public CommandLine help() throws ParseException {
  CommandLine c=new CommandLine();
    c.command = jj_consume_token(HELP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HELP:
    case EXIT:
    case SHOWPROPERTIES:
    case SETPROPERTIES:
    case ADDCOREASSET:
    case SHOWCOREASSETS:
    case SHOWINSTANCES:
    case INSTANTIATECOREASSET:
    case SHOWINSTANCEDIFF:
    case SHOWCOREDIFF:
    case REBASE:
    case INTEGRATE:
    case CLEAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHOWPROPERTIES:
        c.arguments[0] = jj_consume_token(SHOWPROPERTIES);
        break;
      case SETPROPERTIES:
        c.arguments[0] = jj_consume_token(SETPROPERTIES);
        break;
      case ADDCOREASSET:
        c.arguments[0] = jj_consume_token(ADDCOREASSET);
        break;
      case SHOWCOREASSETS:
        c.arguments[0] = jj_consume_token(SHOWCOREASSETS);
        break;
      case SHOWINSTANCES:
        c.arguments[0] = jj_consume_token(SHOWINSTANCES);
        break;
      case INSTANTIATECOREASSET:
        c.arguments[0] = jj_consume_token(INSTANTIATECOREASSET);
        break;
      case SHOWINSTANCEDIFF:
        c.arguments[0] = jj_consume_token(SHOWINSTANCEDIFF);
        break;
      case SHOWCOREDIFF:
        c.arguments[0] = jj_consume_token(SHOWCOREDIFF);
        break;
      case REBASE:
        c.arguments[0] = jj_consume_token(REBASE);
        break;
      case INTEGRATE:
        c.arguments[0] = jj_consume_token(INTEGRATE);
        break;
      case CLEAR:
        c.arguments[0] = jj_consume_token(CLEAR);
        break;
      case HELP:
        c.arguments[0] = jj_consume_token(HELP);
        break;
      case EXIT:
        c.arguments[0] = jj_consume_token(EXIT);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(0);
 {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public CommandLine showProperties() throws ParseException {
  CommandLine c=new CommandLine();
    c.command = jj_consume_token(SHOWPROPERTIES);
    jj_consume_token(0);
  {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public CommandLine setProperties() throws ParseException {
  CommandLine c=new CommandLine();
    c.command = jj_consume_token(SETPROPERTIES);
    jj_consume_token(0);
  {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public CommandLine addCoreAsset() throws ParseException {
  CommandLine c=new CommandLine();
    c.command = jj_consume_token(ADDCOREASSET);
    c.arguments[0] = jj_consume_token(PATH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PATH:
      c.arguments[1] = jj_consume_token(PATH);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(0);
  {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public CommandLine showCoreAssets() throws ParseException {
  CommandLine c=new CommandLine();
    c.command = jj_consume_token(SHOWCOREASSETS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      c.arguments[0] = jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PATH:
      c.arguments[1] = jj_consume_token(PATH);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS_D:
      c.arguments[2] = jj_consume_token(MINUS_D);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(0);
  {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public CommandLine showInstances() throws ParseException {
  CommandLine c=new CommandLine();
    c.command = jj_consume_token(SHOWINSTANCES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PATH:
      c.arguments[0] = jj_consume_token(PATH);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      c.arguments[1] = jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(0);
  {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public CommandLine instantiateCoreAsset() throws ParseException {
  CommandLine c=new CommandLine();
    c.command = jj_consume_token(INSTANTIATECOREASSET);
    c.arguments[0] = jj_consume_token(PATH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      c.arguments[1] = jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PATH:
      c.arguments[2] = jj_consume_token(PATH);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(0);
  {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public CommandLine showInstanceDiff() throws ParseException {
  CommandLine c=new CommandLine();
    c.command = jj_consume_token(SHOWINSTANCEDIFF);
    c.arguments[0] = jj_consume_token(PATH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      c.arguments[1] = jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(0);
  {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public CommandLine integrate() throws ParseException {
  CommandLine c=new CommandLine();
    c.command = jj_consume_token(INTEGRATE);
    c.arguments[0] = jj_consume_token(PATH);
    jj_consume_token(0);
  {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public CommandLine rebase() throws ParseException {
  CommandLine c=new CommandLine();
    c.command = jj_consume_token(REBASE);
    c.arguments[0] = jj_consume_token(PATH);
    jj_consume_token(0);
  {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public CommandLine showCoreDiff() throws ParseException {
  CommandLine c=new CommandLine();
    c.command = jj_consume_token(SHOWCOREDIFF);
    c.arguments[0] = jj_consume_token(PATH);
    jj_consume_token(0);
  {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  public CommandInterpreterTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1fff0,0x1fff0,0x1fff0,0x80000,0x40000,0x80000,0x20000,0x80000,0x40000,0x40000,0x80000,0x40000,};
   }

  public CommandInterpreter(java.io.InputStream stream) {
     this(stream, null);
  }
  public CommandInterpreter(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CommandInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  public CommandInterpreter(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CommandInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  public CommandInterpreter(CommandInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  public void ReInit(CommandInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[20];
    for (int i = 0; i < 20; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

        }
